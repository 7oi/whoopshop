@inherits System.Web.Mvc.WebViewPage

<link href="~/Games/BlackJack/styles.css" rel="stylesheet" />

<script src="../../Scripts/jquery-1.8.2.js"></script>
<script src="../../Scripts/jquery-ui-1.10.2.js"></script>
<script src="../../Scripts/jquery.signalR-1.0.1.js"></script>
<script src="~/Games/Shared/Player.js"></script>
<script src="~/Games/Shared/Cards.js"></script>
<script src="~/signalr/hubs"></script>
<script>
    /* Here within dwells the code for the game Black Jack.*/

    // Add properties to player:
    // hasBlackJack tags the user if he has black jack, basically
    Player.prototype.hasBlackJack = false;
    Player.prototype.totallyBust = false;
    Player.prototype.seat = null;

    // RealValue calculates the real calue of the card. Accepts a card as an argument
    function RealValue(c) {
        var val;
        switch (c.value) {
            // If it's an Ace we get 11. We'll handle busting elsewhere.
            case 1:
                val = 11;
                break;
                // Royalty is all 10's
            case 11:
            case 12:
            case 13:
                val = 10;
                break;
                // Others just have their respected values
            default:
                val = c.value;
                break;
        }
        return val;
    }

    // CalculateTotal returns the total of the players hand and accepts a player as an argument
    function CalculateTotal(p) {
        var totes = 0;
        var l = p.cards.length;
        // Loop over all the cards and add up the real values
        for (var i = 0; i < l; i++) {
            if (!p.cards[i].upside) {
                p.upside = true;
            }
            totes += RealValue(p.cards[i]);
        }
        // Check if player is bust and take action to fix it if there are aces
        if (totes > 21) {
            // Loop and check if there are aces
            for (var i = 0; i < l; i++) {
                if (p.cards[i].value == 1) {
                    // If there's an ace lower the total by 10
                    totes -= 10;
                    // If the total is below 21 break from the loop
                    if (totes <= 21) {
                        break;
                    }
                }
            }
        }
        // Now we check again...
        if (totes > 21) {
            // If it didn't work, set player as bust
            p.totallyBust = true;
        }
        return totes;
    }

    // IsBlackJack checks for Black Jack for a single player and accepts a player as an argument
    function IsBlackJack(p) {
        // Check for Black Jack, according to the rules
        if ((p.cards.length == 2 && CalculateTotal(p) == 21) || (p.cards.length == 5 && !p.totallyBust))
            return true;
        else
            return false;
    }

    // BlackJackCheck checks all players for Black Jack. It accepts an array of players
    function BlackJackCheck(p) {
        // Loop through the players, including the dealer who will be at p[0]
        for (var i = 0; i < p.length; i++) {
            if (p[i] != null) {
                // Tag them so they have Black Jack
                p[i].hasBlackJack = IsBlackJack(p[i]);
            }

        }
        // Now we check if the dealer has black jack
        if (p[0].hasBlackJack) {
            // Then we'll have to loop through our players again
            for (var i = 1; i < p.length; i++) {
                if (p[i] != null) {
                    // We check if we have a tie
                    if (p[i].hasBlackJack) {
                        // And return player his bet
                        p[i].points += p[i].bet;
                        // And set the message to the player
                        $(".player" + i).children(".message").text("Jafntefli!");
                    }
                    // Then set the bet amount to 0. 
                    // Note: if it wasn't a tie this means the player loses his betted points
                    p[i].bet = 0;
                    // And set the message to the player
                    $(".player" + i).children(".message").text("Þú tapar!");
                    // ...and show the message
                    $(".player" + i).children(".message").show();
                }
            }
        }
    }

    // CheckForWinners does what it says, really
    function CheckForWinners(p, me) {
        $(".player0").children(".playingcard-backside").toggleClass("playingcard-backside");
        $(".player0").children(".score").text(CalculateTotal(allplayers.dealer));
        while (CalculateTotal(p[0]) < 18) {
            game.server.newCard(group, 0, 1);
            $(".player0").children(".score").text(CalculateTotal(allplayers.dealer));
        }
        var dealerToBeat = CalculateTotal(p[0]);
        for (var i = 1; i < p.length; i++) {
            var currP = ".player" + i;
            if (p[i] != null) {
                // Make the bet go where it's supposed to go
                if (!p[i].totallyBust && (CalculateTotal(p[i]) > dealerToBeat)) {
                    p[i].points += (2 * p[i].bet);
                    $(currP).children(".message").text("Úps, þú sprakkst!");

                }
                else if (!p[i].totallyBust && (CalculateTotal(p[i]) == dealerToBeat)) {
                    p[i].points += p[i].bet;
                }
                // Reset the variables
                p[i].bet = 0;
                $(currP).children(".message").show();
                //p[i].hitMe = true;
                // TO DO: Update user points in database
            }
        }
        game.server.returnWinnings(me);
    }

    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
        var encodedValue = $('<div />').text(value).html();
        return encodedValue;
    };

    // The game is here
    $(document).ready(function () {

        /*========================================== INITIALIZATION ==========================================*/

        // Start by establishing a connection to the gamehub 
        var game = $.connection.gameHub;
        // Create a group id for this game
        var group = 'boo';
        // Good to save the username
        var me = '@HttpContext.Current.User.Identity.Name';
        var myseat = null;
        var numcards;
        var myPclass;
        var allplayers = [];
        // Create the dealer
        allplayers[0] = new Player("Dealer", 0, 0);
        // Initialize the rest of the array with nulled seats
        for (var i = 1; i < 5; i++) {
            allplayers[i] = null;
        }
        

        /* =============================== SignalR functions =============================== */

        // Create a function that the hub can call back to display messages
        game.client.sendMessage = function (name, message) {
            // TODO? Save to database?
            // Add the message to the page. 
            $('.game-chat-messages').append('<div class= message"><span class="message-user">' + htmlEncode(name)
                + ': </span><span class="message-value">' + htmlEncode(message) + '</span></div>');
            // scroll to bottom of chat on load
            $('.game-chat-messages').scrollTop($('.game-chat-messages')[0].scrollHeight);
        };

        // A client-side method for players to be able to sit.
        game.client.sitDown = function (me, points, seatnr) {
            // Fade out the seat
            $('player' + seatnr).find('.sit').fadeOut();
            // Call player constructor for your player
            allplayers[seatnr] = new Player(me, points, seatnr);            // TODO: Inject players real points
            // Add your name to the username display
            $(".player" + seatnr).find(".username-value").text(me);
            // Add your points to the username display
            $(".player" + seatnr).find(".playerscore-value").text(allplayers[seatnr].points);
        };

        // A client-side method for players to be able to quit.
        game.client.quit = function (seatnr) {
            // Null out the seat
            allplayers[seatnr] = null;
            // Empty the username value
            $(".player" + seatnr).find(".username-value").text(" ");
            // Empty the points value
            $(".player" + seatnr).find(".playerscore-value").text("0");
        };

        // A client-side method for players to be able to bet.
        game.client.bet = function (seatnr, amount) {
            var myPclass = ".player" + seatnr;
            // Update the players bet
            allplayers[seatnr].MakeBet(amount);
            // Display the bet
            $(myPclass).find(".score").empty();
            $(myPclass).find(".score").text(allplayers[seatnr].bet);
            $(myPclass).find(".playerscore-value").text(allplayers[seatnr].points);
        };

        // A client side method to get a card
        game.client.getCard = function (seatnr, card, upside) {
            var cardTemp = new Card(card.value, card.suit, upside);
            allplayers[seatnr].cards.push(cardTemp);
            $(".player" + seatnr).children(".playerinstance-cardarea").append(cardTemp.toString());
        }

        // A client side method to update players score
        game.client.total = function (seatnr) {
            $(".player" + seatnr).children(".score").text(CalculateTotal(allplayers[myseat]));
            if (allplayers[myseat].totallyBust) {
                $(myPclass).children(".message").text("Sprungin(n)!");
                $(myPclass).children(".message").show();
                $(myPclass).find(".hitme").addClass('inactive');
                $(myPclass).find(".stand").addClass('inactive');
                allplayers[myseat].hitMe = false;
            }
        }

        // A client side method for a player to stand
        game.client.stand = function (me, seatnr) {
            $(".player" + seatnr).children(".message").text(me + " stendur");
            $(".player" + seatnr).children(".message").fadeIn();
        }

        $.fn.extend({
            blackjack:
                function () {
                    // Target the game area and add a game table to it
                    var gameObjectElement = '#' + $(this).attr('id');
                    $(gameObjectElement).html('<div id="board"></div>');
                    $("#board").append(
                        "<div class='player0 playerinstance'>"
                        + "<div class='scorelabel'>Gjafari</div>"
                        + "<div class='playerinstance-cardarea'></div>"
                        + "<div class='message'>Þú hefur tapað!</div>"
                        + "<img class='dealer-img' src='http://www.avensis.in/images/personal_trollface_hd.png'/></div>"
                        );
                    // Print out a display for each player in allplayers
                    for (var p = 1; p < 5; p++) {
                        // Append to the gameboard
                        $("#board").append(
                            "<div class='player" + p + " playerinstance'>"
                            + "<div class='scorelabel'>Lagt undir: </div>"
                            + "<div class='score'>0</div>"
                            + "<div class='playerinstance-cardarea'></div>"                     // should div end here?
                            + "<ul class='buttons'>"
                            + "<li><a href='javascript:void(0)' class='hitme'>Fá spil</a></li>"                          
                            + "<li><a href='javascript:void(0)' class='stand'>Standa</a></li>"
                            + "<li><a href='javascript:void(0)' class='forfeit'>Uppgjöf</a></li>"    // use .inactive for inactive state  
                            + "<li><a href='javascript:void(0)' class='quit'>Hætta</a></li></ul>"
                            + "<div class='usermeta'>"
                            + "<div class='username'><span class='username-label'>Notandi: </span><span class='username-value'>&nbsp;</span></div>"
                            + "<div class='playerscore'><span class='playerscore-label'>Stig: </span><span class='playerscore-value'>0</span></div></div>"    // Scoreboard
                            + "<div class='inactive-overlay'></div>"
                            + "<div class='message'>Þú hefur tapað!</div>"
                            + "<div class='counter'></div>"
                            + "<div class='betform'>"
                            + "<input type='text' value='10' class='betnumber'>"
                            + "<a href='javascript:void(0)' class='placebet'>Veðja</a></div>"
                            + "<a href='javascript:void(0)' class='sit'>Setjast</a>"
                            + "<div class='gamescore'></div></div>");
                        
                    };
                    $(".buttons").children("li").children("a").addClass("inactive");
                    $('.inactive-overlay').show();
                    $('.betform').hide();
                    $('.counter').hide();
                }
        });

        // Start connection
        $.connection.hub.start().done(function () {
            $("#play-gamearea").blackjack();
            // Send message if send button is pressed
            $('.game-chat-form-send').click(function () {
                // Call the Send method on the hub. 
                game.server.chatSend(group, me, $('.game-chat-form-input').val());
                // Clear text box and reset focus for next comment. 
                $('.game-chat-form-input').val('').focus();
            });
            // ...or if enter is pressed
            $('.game-chat-form-input').keydown(function (e) {
                if (e.keyCode == 13) {
                    // Call the Send method on the hub. 
                    game.server.chatSend(group, me, $('.game-chat-form-input').val());
                    // Clear text box and reset focus for next comment. 
                    $('.game-chat-form-input').val('').focus();
                }
            });

            // Helper function for the sit function below
            var sitting = function (seat) {
                myPclass = ".player" + seat;
                //allplayers[seat] = new Player(me, 10000, seat);
                game.server.chooseSeat(group, seat);
                // Hide all buttons for sitting down
                $(".sit").fadeOut();
                $(myPclass).find('.betform').fadeIn();
                $(myPclass).find('.placebet').removeClass('inactive');
                $(myPclass).find('.quit').removeClass('inactive');
                $(myPclass).children('.inactive-overlay').fadeOut();
            } 
            // Generate functions for each player to choose seat
            $(".player1").delegate(".sit", "click", function () {
                myseat = 1;
                sitting(myseat);
            });
            $(".player2").delegate(".sit", "click", function () {
                myseat = 2;
                sitting(myseat);
            });
            $(".player3").delegate(".sit", "click", function () {
                myseat = 3;
                sitting(myseat);
            });
            $(".player4").delegate(".sit", "click", function () {
                myseat = 4;
                sitting(myseat);
            });

            
            var quitting = function () {
                // SignalR magic function
                game.server.leaveGame(group, allplayers[myseat].points, myseat);
                // Fade out the buttons, of course
                $(myPclass).children(".buttons").find('a').addClass('inactive');
                $(myPclass).find(".username-value").text(" ");
                // Empty the points value
                $(myPclass).find(".score").text(0);
                $(myPclass).find(".playerscore-value").text("");
                $(myPclass).children('.inactive-overlay').fadeIn();
                allplayers[myseat] = null;
                myseat = null;
                myPclass = null;
                for (var p = 1; p < 5; p++) {
                    if (allplayers[p] == null) {
                        $('.player' + p).children('.sit').fadeIn();
                    }
                }
                $('.betform').fadeOut();
                
            } 
            // Functions for the player to quit the game
            $(".player1").delegate(".quit", "click", function () {
                quitting();
            });
            $(".player2").delegate(".quit", "click", function () {
                quitting();
            });
            $(".player3").delegate(".quit", "click", function () {
                quitting();
            });
            $(".player4").delegate(".quit", "click", function () {
                quitting();
            });

            // If player clicks on gameboard, messages to him/her disappear
            $(document).delegate("*", "click", function () {
                if (myseat != null) {
                    $(myPclass).children(".message").fadeOut();
                }
            });

            // Helper function for the betting function
            var betting = function (seat) {
                myPclass = '.player' + seat;
                var betted = $(myPclass).find(".betnumber").val();
                game.server.makeTheBet(group, seat, betted);
                // Hide bet button once clicked
                $(myPclass).children(".betform").fadeOut();
                
                // Deal two cards
                for (var i = 0; i < 2; i++) {
                    game.server.newCard(group, seat, 1);
                }
                numcards = 1;
                // Update players score
                game.server.updateTotal(group, seat);
                // And then open for the buttons
                $(myPclass).children('.buttons').find('a').removeClass('inactive');
            }                                                   //TODO: Database magic
            // When bet is clicked start game session and deal two cards to the player              
            $('.player1').delegate(".placebet", "click", function () {
                betting(myseat);
            });
            // Or if enter is pressed while setting the value
            $('.player1').delegate(".betnumber", "keydown", function (e) {
                if (e.keyCode == 13) {
                    betting(myseat);
                }
            });
            $('.player2').delegate(".placebet", "click", function () {
                betting(myseat);
            });
            $('.player2').delegate(".betnumber", "keydown", function (e) {
                if (e.keyCode == 13) {
                    betting(myseat);
                }
            });
            $('.player3').delegate(".placebet", "click", function () {
                betting(myseat);
            });
            $('.player3').delegate(".betnumber", "keydown", function (e) {
                if (e.keyCode == 13) {
                    betting(myseat);
                }
            });
            $('.player4').delegate(".placebet", "click", function () {
                betting(myseat);
            });
            $('.player4').delegate(".betnumber", "keydown", function (e) {
                if (e.keyCode == 13) {
                    betting(myseat);
                }
            });

            // Helper function for the hitme function
            var hit = function (seat) {
                // register the count of cards so we can print them later
                game.server.newCard(group, seat, 1);
                numcards++;
                // update the score
                game.server.updateTotal(group, seat);
            }
            // give a card to the player every time the hit me button is pushed
            $('.player1').delegate(".hitme", "click", function () {
                hit(myseat);
            });
            $('.player2').delegate(".hitme", "click", function () {
                hit(myseat);
            });
            $('.player3').delegate(".hitme", "click", function () {
                hit(myseat);
            });
            $('.player4').delegate(".hitme", "click", function () {
                hit(myseat);
            });

            // Helper function for the stand function
            var standing = function (seat) {
                var myPclass = '.player' + seat;
                game.server.playerStands(group, me, seat);
                $(myPclass).find('.hitme').addClass('inactive');
                $(myPclass).find('.stand').addClass('inactive');
                $(myPclass).find('.forfeit').addClass('inactive');
            }
            $('.player1').delegate(".stand", "click", function () {
                standing(myseat);
            });
            $('.player2').delegate(".stand", "click", function () {
                standing(myseat);
            });
            $('.player3').delegate(".stand", "click", function () {
                standing(myseat);
            });
            $('.player4').delegate(".stand", "click", function () {
                standing(myseat);
            });

            game.server.createDeck();
            // Join group of players
            game.server.join(group);

            // Shuffle the cards
            game.server.shuffleTheDeck();

            // Deal two cards to dealer
            for (var i = 0; i < 2; i++) {
                game.server.newCard(group, 0, i);
            }
            
        });
    });
</script>



